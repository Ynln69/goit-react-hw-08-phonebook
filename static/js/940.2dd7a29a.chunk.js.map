{"version":3,"file":"static/js/940.2dd7a29a.chunk.js","mappings":"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","sources":["../node_modules/clsx/dist/clsx.m.js","../node_modules/reselect/es/defaultMemoize.js","../node_modules/reselect/es/index.js","redux/selectors.js","components/ContactsList/ContactsList.styled.jsx","components/ContactsList/ContactsList.jsx","components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","components/PhoneForm/PhoneForm.styled.jsx","components/PhoneForm/PhoneForm.jsx","pages/Phonebook.jsx"],"sourcesContent":["function r(e){var t,f,n=\"\";if(\"string\"==typeof e||\"number\"==typeof e)n+=e;else if(\"object\"==typeof e)if(Array.isArray(e))for(t=0;t<e.length;t++)e[t]&&(f=r(e[t]))&&(n&&(n+=\" \"),n+=f);else for(t in e)e[t]&&(n&&(n+=\" \"),n+=t);return n}export function clsx(){for(var e,t,f=0,n=\"\";f<arguments.length;)(e=arguments[f++])&&(t=r(e))&&(n&&(n+=\" \"),n+=t);return n}export default clsx;","// Cache implementation based on Erik Rasmussen's `lru-memoize`:\n// https://github.com/erikras/lru-memoize\nvar NOT_FOUND = 'NOT_FOUND';\n\nfunction createSingletonCache(equals) {\n  var entry;\n  return {\n    get: function get(key) {\n      if (entry && equals(entry.key, key)) {\n        return entry.value;\n      }\n\n      return NOT_FOUND;\n    },\n    put: function put(key, value) {\n      entry = {\n        key: key,\n        value: value\n      };\n    },\n    getEntries: function getEntries() {\n      return entry ? [entry] : [];\n    },\n    clear: function clear() {\n      entry = undefined;\n    }\n  };\n}\n\nfunction createLruCache(maxSize, equals) {\n  var entries = [];\n\n  function get(key) {\n    var cacheIndex = entries.findIndex(function (entry) {\n      return equals(key, entry.key);\n    }); // We found a cached entry\n\n    if (cacheIndex > -1) {\n      var entry = entries[cacheIndex]; // Cached entry not at top of cache, move it to the top\n\n      if (cacheIndex > 0) {\n        entries.splice(cacheIndex, 1);\n        entries.unshift(entry);\n      }\n\n      return entry.value;\n    } // No entry found in cache, return sentinel\n\n\n    return NOT_FOUND;\n  }\n\n  function put(key, value) {\n    if (get(key) === NOT_FOUND) {\n      // TODO Is unshift slow?\n      entries.unshift({\n        key: key,\n        value: value\n      });\n\n      if (entries.length > maxSize) {\n        entries.pop();\n      }\n    }\n  }\n\n  function getEntries() {\n    return entries;\n  }\n\n  function clear() {\n    entries = [];\n  }\n\n  return {\n    get: get,\n    put: put,\n    getEntries: getEntries,\n    clear: clear\n  };\n}\n\nexport var defaultEqualityCheck = function defaultEqualityCheck(a, b) {\n  return a === b;\n};\nexport function createCacheKeyComparator(equalityCheck) {\n  return function areArgumentsShallowlyEqual(prev, next) {\n    if (prev === null || next === null || prev.length !== next.length) {\n      return false;\n    } // Do this in a for loop (and not a `forEach` or an `every`) so we can determine equality as fast as possible.\n\n\n    var length = prev.length;\n\n    for (var i = 0; i < length; i++) {\n      if (!equalityCheck(prev[i], next[i])) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n}\n// defaultMemoize now supports a configurable cache size with LRU behavior,\n// and optional comparison of the result value with existing values\nexport function defaultMemoize(func, equalityCheckOrOptions) {\n  var providedOptions = typeof equalityCheckOrOptions === 'object' ? equalityCheckOrOptions : {\n    equalityCheck: equalityCheckOrOptions\n  };\n  var _providedOptions$equa = providedOptions.equalityCheck,\n      equalityCheck = _providedOptions$equa === void 0 ? defaultEqualityCheck : _providedOptions$equa,\n      _providedOptions$maxS = providedOptions.maxSize,\n      maxSize = _providedOptions$maxS === void 0 ? 1 : _providedOptions$maxS,\n      resultEqualityCheck = providedOptions.resultEqualityCheck;\n  var comparator = createCacheKeyComparator(equalityCheck);\n  var cache = maxSize === 1 ? createSingletonCache(comparator) : createLruCache(maxSize, comparator); // we reference arguments instead of spreading them for performance reasons\n\n  function memoized() {\n    var value = cache.get(arguments);\n\n    if (value === NOT_FOUND) {\n      // @ts-ignore\n      value = func.apply(null, arguments);\n\n      if (resultEqualityCheck) {\n        var entries = cache.getEntries();\n        var matchingEntry = entries.find(function (entry) {\n          return resultEqualityCheck(entry.value, value);\n        });\n\n        if (matchingEntry) {\n          value = matchingEntry.value;\n        }\n      }\n\n      cache.put(arguments, value);\n    }\n\n    return value;\n  }\n\n  memoized.clearCache = function () {\n    return cache.clear();\n  };\n\n  return memoized;\n}","import { defaultMemoize, defaultEqualityCheck } from './defaultMemoize';\nexport { defaultMemoize, defaultEqualityCheck };\n\nfunction getDependencies(funcs) {\n  var dependencies = Array.isArray(funcs[0]) ? funcs[0] : funcs;\n\n  if (!dependencies.every(function (dep) {\n    return typeof dep === 'function';\n  })) {\n    var dependencyTypes = dependencies.map(function (dep) {\n      return typeof dep === 'function' ? \"function \" + (dep.name || 'unnamed') + \"()\" : typeof dep;\n    }).join(', ');\n    throw new Error(\"createSelector expects all input-selectors to be functions, but received the following types: [\" + dependencyTypes + \"]\");\n  }\n\n  return dependencies;\n}\n\nexport function createSelectorCreator(memoize) {\n  for (var _len = arguments.length, memoizeOptionsFromArgs = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    memoizeOptionsFromArgs[_key - 1] = arguments[_key];\n  }\n\n  var createSelector = function createSelector() {\n    for (var _len2 = arguments.length, funcs = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      funcs[_key2] = arguments[_key2];\n    }\n\n    var _recomputations = 0;\n\n    var _lastResult; // Due to the intricacies of rest params, we can't do an optional arg after `...funcs`.\n    // So, start by declaring the default value here.\n    // (And yes, the words 'memoize' and 'options' appear too many times in this next sequence.)\n\n\n    var directlyPassedOptions = {\n      memoizeOptions: undefined\n    }; // Normally, the result func or \"output selector\" is the last arg\n\n    var resultFunc = funcs.pop(); // If the result func is actually an _object_, assume it's our options object\n\n    if (typeof resultFunc === 'object') {\n      directlyPassedOptions = resultFunc; // and pop the real result func off\n\n      resultFunc = funcs.pop();\n    }\n\n    if (typeof resultFunc !== 'function') {\n      throw new Error(\"createSelector expects an output function after the inputs, but received: [\" + typeof resultFunc + \"]\");\n    } // Determine which set of options we're using. Prefer options passed directly,\n    // but fall back to options given to createSelectorCreator.\n\n\n    var _directlyPassedOption = directlyPassedOptions,\n        _directlyPassedOption2 = _directlyPassedOption.memoizeOptions,\n        memoizeOptions = _directlyPassedOption2 === void 0 ? memoizeOptionsFromArgs : _directlyPassedOption2; // Simplifying assumption: it's unlikely that the first options arg of the provided memoizer\n    // is an array. In most libs I've looked at, it's an equality function or options object.\n    // Based on that, if `memoizeOptions` _is_ an array, we assume it's a full\n    // user-provided array of options. Otherwise, it must be just the _first_ arg, and so\n    // we wrap it in an array so we can apply it.\n\n    var finalMemoizeOptions = Array.isArray(memoizeOptions) ? memoizeOptions : [memoizeOptions];\n    var dependencies = getDependencies(funcs);\n    var memoizedResultFunc = memoize.apply(void 0, [function recomputationWrapper() {\n      _recomputations++; // apply arguments instead of spreading for performance.\n\n      return resultFunc.apply(null, arguments);\n    }].concat(finalMemoizeOptions)); // If a selector is called with the exact same arguments we don't need to traverse our dependencies again.\n\n    var selector = memoize(function dependenciesChecker() {\n      var params = [];\n      var length = dependencies.length;\n\n      for (var i = 0; i < length; i++) {\n        // apply arguments instead of spreading and mutate a local list of params for performance.\n        // @ts-ignore\n        params.push(dependencies[i].apply(null, arguments));\n      } // apply arguments instead of spreading for performance.\n\n\n      _lastResult = memoizedResultFunc.apply(null, params);\n      return _lastResult;\n    });\n    Object.assign(selector, {\n      resultFunc: resultFunc,\n      memoizedResultFunc: memoizedResultFunc,\n      dependencies: dependencies,\n      lastResult: function lastResult() {\n        return _lastResult;\n      },\n      recomputations: function recomputations() {\n        return _recomputations;\n      },\n      resetRecomputations: function resetRecomputations() {\n        return _recomputations = 0;\n      }\n    });\n    return selector;\n  }; // @ts-ignore\n\n\n  return createSelector;\n}\nexport var createSelector = /* #__PURE__ */createSelectorCreator(defaultMemoize);\n// Manual definition of state and output arguments\nexport var createStructuredSelector = function createStructuredSelector(selectors, selectorCreator) {\n  if (selectorCreator === void 0) {\n    selectorCreator = createSelector;\n  }\n\n  if (typeof selectors !== 'object') {\n    throw new Error('createStructuredSelector expects first argument to be an object ' + (\"where each property is a selector, instead received a \" + typeof selectors));\n  }\n\n  var objectKeys = Object.keys(selectors);\n  var resultSelector = selectorCreator( // @ts-ignore\n  objectKeys.map(function (key) {\n    return selectors[key];\n  }), function () {\n    for (var _len3 = arguments.length, values = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      values[_key3] = arguments[_key3];\n    }\n\n    return values.reduce(function (composition, value, index) {\n      composition[objectKeys[index]] = value;\n      return composition;\n    }, {});\n  });\n  return resultSelector;\n};","import { createSelector } from '@reduxjs/toolkit';\n\nexport const getContacts = state => state.contacts.items;\nexport const getFilteredContacts = state => state.filter;\nexport const getLoading = state => state.contacts.isLoading;\nexport const getError = state => state.contacts.error;\n\nexport const getVisibleContacts = createSelector(\n  [getContacts, getFilteredContacts],\n  (contacts, filter) => {\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter)\n    );\n  }\n);\n","import styled from '@emotion/styled';\n\nexport const ListOfContact = styled.ol`\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  font-size: 20px;\n`;\n\nexport const Items = styled.li`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: space-between;\n`;\nexport const ItemButton = styled.button`\n  padding: 5px 15px;\n  box-shadow: 0px 4px 4px rgba(0, 0, 0, 0.15);\n  border-radius: 4px;\n  border: none;\n  cursor: pointer;\n  background-color: #fa8072;\n  font-weight: 700;\n  font-size: 15px;\n  color: currentColor;\n\n  &:hover {\n    background-color: #8b0000;\n  }\n`;\n","import { toast } from 'react-toastify';\nimport { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { getLoading, getError, getVisibleContacts } from 'redux/selectors';\nimport { deleteContact, fetchContacts } from 'redux/operations';\n\nimport { ListOfContact, Items, ItemButton } from './ContactsList.styled';\n\nconst ContactsList = () => {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(getLoading);\n  const error = useSelector(getError);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  const visibleContacts = useSelector(getVisibleContacts);\n\n  const handleDelete = contactId => {\n    dispatch(deleteContact(contactId));\n    toast.error('One contact has been deleted');\n  };\n\n  return (\n    <ListOfContact>\n      {isLoading && !error && <b>Loading...</b>}\n      {visibleContacts.map(({ id, name, phoneNumber }) => (\n        <Items key={id}>\n          {name}:<br /> {phoneNumber}\n          <ItemButton type=\"button\" onClick={() => handleDelete(id)}>\n            Delete\n          </ItemButton>\n        </Items>\n      ))}\n    </ListOfContact>\n  );\n};\n\nexport default ContactsList;\n","import styled from '@emotion/styled';\n\nexport const FilterLabel = styled.label`\n  display: flex;\n  flex-direction: column;\n  align-items: flex-end;\n  gap: 10px;\n  font-size: 20px;\n`;\n\nexport const FilterInput = styled.input`\n  padding: 4px;\n  border: none;\n  border-radius: 3px;\n  outline: none;\n  color: #fff;\n  background-color: #2f303a;\n  font-size: 20px;\n  font-family: inherit;\n`;\n","import { useDispatch } from 'react-redux';\n\nimport { getContactsFilter } from 'redux/filterSlice';\nimport { FilterLabel, FilterInput } from './Filter.styled';\n\nconst FilterContacts = () => {\n  const changeFilter = e => {\n    dispatch(getContactsFilter(e.currentTarget.value.toLowerCase()));\n  };\n\n  const dispatch = useDispatch();\n  return (\n    <div>\n      <FilterLabel>\n        Find contacts by name\n        <FilterInput type=\"text\" onChange={changeFilter} />\n      </FilterLabel>\n    </div>\n  );\n};\n\nexport default FilterContacts;\n","import styled from '@emotion/styled';\n\nexport const FormBox = styled.div`\n  height: 300px;\n  display: flex;\n  flex-direction: column;\n  gap: 30px;\n  padding: 20px;\n  border-radius: 5px;\n  box-shadow: rgba(0, 0, 0, 0.1) 0px 2px 5px -1px;\n  background-color: rgba(0, 0, 0, 0.3);\n  backdrop-filter: blur(2px);\n  &:hover,\n  &:focus {\n    box-shadow: 1px 1px 10px 10px #e6e6fa;\n  }\n  > p {\n    text-align: center;\n    font-size: 25px;\n    margin-top: 15px;\n  }\n`;\n\nexport const FormTitle = styled.h2`\n  font-size: 30px;\n  color: #f0f8ff;\n`;\n\nexport const PhoneForm = styled.form`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  gap: 20px;\n  padding: 8px;\n\n  font-family: cursive;\n`;\n\nexport const FormLabel = styled.label`\n  display: flex;\n  flex-direction: column;\n  gap: 5px;\n  font-size: 20px;\n`;\n\nexport const FormInput = styled.input`\n  padding: 4px;\n  border: none;\n  border-radius: 3px;\n  outline: none;\n  color: #fff;\n  background-color: #2f303a;\n  font-size: 20px;\n  font-family: inherit;\n`;\n\nexport const FormButton = styled.button`\n  padding: 5px 45px;\n  box-shadow: 0px 4px 4px rgba(0, 0, 0, 0.15);\n  border-radius: 4px;\n  border: none;\n  cursor: pointer;\n  background-color: #0000ff;\n  font-weight: 700;\n  font-size: 15px;\n  color: currentColor;\n  &:hover {\n    background-color: #00008b;\n  }\n`;\n","import { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from 'redux/operations';\nimport {\n  PhoneForm,\n  FormLabel,\n  FormInput,\n  FormButton,\n  FormBox,\n  FormTitle,\n} from './PhoneForm.styled';\nimport { getContacts } from 'redux/selectors';\n\nconst Form = () => {\n  const [name, setName] = useState('');\n  const [phone, setPhone] = useState('');\n\n  const dispatch = useDispatch();\n\n  const handelChange = e => {\n    const { name, value } = e.target;\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'phone':\n        setPhone(value);\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  const contacts = useSelector(getContacts);\n  const handelSubmit = e => {\n    e.preventDefault();\n    const checkName = contacts.find(\n      contact => contact.name.toLowerCase() === name.toLowerCase()\n    );\n    if (checkName) {\n      toast.error(`${name} is already in contacts`);\n      return;\n    }\n\n    const data = { name, phone };\n    dispatch(addContact(data));\n    toast.success(`Contact ${name} added successfully`);\n\n    setName('');\n    setPhone('');\n  };\n\n  return (\n    <FormBox>\n      <FormTitle>Add your contacts</FormTitle>\n      <PhoneForm onSubmit={handelSubmit}>\n        <FormLabel>\n          Name\n          <FormInput\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n            value={name}\n            onChange={handelChange}\n          />\n        </FormLabel>\n        <FormLabel>\n          Number\n          <FormInput\n            type=\"tel\"\n            name=\"phone\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            required\n            value={phone}\n            onChange={handelChange}\n          />\n        </FormLabel>\n        <FormButton type=\"submit\">Add Contact</FormButton>\n      </PhoneForm>\n    </FormBox>\n  );\n};\n\nexport default Form;\n","import ContactsList from 'components/ContactsList/ContactsList';\nimport FilterContacts from 'components/Filter/Filter';\nimport Form from 'components/PhoneForm/PhoneForm';\n\nconst Phonebook = () => {\n  return (\n    <section>\n      <Form />\n      <FilterContacts />\n      <ContactsList />\n    </section>\n  );\n};\n\nexport default Phonebook;\n"],"names":["r","e","t","f","n","Array","isArray","length","arguments","NOT_FOUND","defaultEqualityCheck","a","b","defaultMemoize","func","equalityCheckOrOptions","providedOptions","equalityCheck","_providedOptions$equa","_providedOptions$maxS","maxSize","resultEqualityCheck","comparator","prev","next","i","createCacheKeyComparator","cache","equals","entry","get","key","value","put","getEntries","clear","undefined","createSingletonCache","entries","cacheIndex","findIndex","splice","unshift","pop","createLruCache","memoized","apply","matchingEntry","find","clearCache","getDependencies","funcs","dependencies","every","dep","dependencyTypes","map","name","join","Error","createSelectorCreator","memoize","_len","memoizeOptionsFromArgs","_key","createSelector","_len2","_key2","_lastResult","_recomputations","directlyPassedOptions","memoizeOptions","resultFunc","_directlyPassedOption","_directlyPassedOption2","finalMemoizeOptions","memoizedResultFunc","concat","selector","params","push","Object","assign","lastResult","recomputations","resetRecomputations","getContacts","state","contacts","items","getLoading","isLoading","getError","error","getVisibleContacts","filter","contact","toLowerCase","includes","ListOfContact","styled","Items","ItemButton","dispatch","useDispatch","useSelector","useEffect","fetchContacts","visibleContacts","id","phoneNumber","type","onClick","contactId","deleteContact","toast","FilterLabel","FilterInput","onChange","getContactsFilter","currentTarget","FormBox","FormTitle","PhoneForm","FormLabel","FormInput","FormButton","useState","setName","phone","setPhone","handelChange","target","onSubmit","preventDefault","data","addContact","pattern","title","required","Filter"],"sourceRoot":""}